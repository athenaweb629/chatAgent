{"version":3,"sources":["Permissions.ts"],"names":["NativeModules","PermissionsAndroid","Platform","WebRTCModule","Permissions","DENIED","GRANTED","PROMPT","Promise","resolve","_requestPermissionAndroid","perm","request","then","granted","RESULTS","_validatePermissionDescriptior","permissionDesc","TypeError","name","VALID_PERMISSIONS","indexOf","query","e","reject","OS","PERMISSIONS","CAMERA","RECORD_AUDIO","check","RESULT","checkPermission","requestPermission","_lastReq"],"mappings":"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","sourcesContent":["\nimport { NativeModules, Permission, PermissionsAndroid, Platform } from 'react-native';\n\nconst { WebRTCModule } = NativeModules;\n\n/**\n * Type declaration for a permissions descriptor.\n */\ntype PermissionDescriptor = {\n    name: string;\n};\n\n/**\n * Class implementing a subset of W3C's Permissions API as defined by:\n * https://www.w3.org/TR/permissions/\n */\nclass Permissions {\n    /**\n     * Possible result values for {@link query}, in accordance with:\n     * https://www.w3.org/TR/permissions/#status-of-a-permission\n     */\n    RESULT = {\n        DENIED: 'denied',\n        GRANTED: 'granted',\n        PROMPT: 'prompt'\n    };\n\n    /**\n     * This implementation only supports requesting these permissions, a subset\n     * of: https://www.w3.org/TR/permissions/#permission-registry\n     */\n    VALID_PERMISSIONS = [ 'camera', 'microphone' ];\n\n    _lastReq: Promise<unknown> = Promise.resolve();\n\n    /**\n     * Helper for requesting Android permissions. On Android only one permission\n     * can be requested at a time (unless the multi-permission API is used,\n     * but we are not using that for symmetry with the W3C API for querying)\n     * so we'll queue them up.\n     *\n     * @param perm - The requested permission from\n     * {@link PermissionsAndroid.PERMISSIONS}\n     * https://facebook.github.io/react-native/docs/permissionsandroid#permissions-that-require-prompting-the-user\n     */\n    _requestPermissionAndroid(perm: Permission) {\n        return new Promise(resolve => {\n            PermissionsAndroid.request(perm).then(\n                granted => resolve(granted === PermissionsAndroid.RESULTS.GRANTED),\n                () => resolve(false)\n            );\n        });\n    }\n\n    /**\n     * Validates the given permission descriptor.\n     */\n    _validatePermissionDescriptior(permissionDesc) {\n        if (typeof permissionDesc !== 'object') {\n            throw new TypeError('Argument 1 of Permissions.query is not an object.');\n        }\n\n        if (typeof permissionDesc.name === 'undefined') {\n            throw new TypeError('Missing required \\'name\\' member of PermissionDescriptor.');\n        }\n\n        if (this.VALID_PERMISSIONS.indexOf(permissionDesc.name) === -1) {\n            throw new TypeError(\n                '\\'name\\' member of PermissionDescriptor is not a valid value for enumeration PermissionName.'\n            );\n        }\n    }\n\n    /**\n     * Method for querying the status of a permission, according to:\n     * https://www.w3.org/TR/permissions/#permissions-interface\n     */\n    query(permissionDesc: PermissionDescriptor) {\n        try {\n            this._validatePermissionDescriptior(permissionDesc);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n\n        if (Platform.OS === 'android') {\n            const perm =\n                permissionDesc.name === 'camera'\n                    ? PermissionsAndroid.PERMISSIONS.CAMERA\n                    : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n\n            return new Promise(resolve => {\n                PermissionsAndroid.check(perm).then(\n                    granted => resolve(granted ? this.RESULT.GRANTED : this.RESULT.PROMPT),\n                    () => resolve(this.RESULT.PROMPT)\n                );\n            });\n        } else if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n            return WebRTCModule.checkPermission(permissionDesc.name);\n        } else {\n            return Promise.reject(new TypeError('Unsupported platform.'));\n        }\n    }\n\n    /**\n     * Custom method NOT defined by W3C's permissions API, which allows the\n     * caller to request a permission.\n     */\n    request(permissionDesc: PermissionDescriptor) {\n        try {\n            this._validatePermissionDescriptior(permissionDesc);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n\n        if (Platform.OS === 'android') {\n            const perm =\n                permissionDesc.name === 'camera'\n                    ? PermissionsAndroid.PERMISSIONS.CAMERA\n                    : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n            const requestPermission = () => this._requestPermissionAndroid(perm);\n\n            this._lastReq = this._lastReq.then(requestPermission, requestPermission);\n\n            return this._lastReq;\n        } else if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n            return WebRTCModule.requestPermission(permissionDesc.name);\n        } else {\n            return Promise.reject(new TypeError('Unsupported platform.'));\n        }\n    }\n}\n\nexport default new Permissions();\n"]}