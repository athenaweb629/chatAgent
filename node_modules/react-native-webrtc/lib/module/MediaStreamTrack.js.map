{"version":3,"sources":["MediaStreamTrack.ts"],"names":["defineCustomEventTarget","Event","NativeModules","addListener","removeListener","Logger","deepClone","log","WebRTCModule","MEDIA_STREAM_TRACK_EVENTS","MediaStreamTrack","constructor","info","_constraints","constraints","_enabled","enabled","_settings","settings","_muted","_peerConnectionId","peerConnectionId","_readyState","readyState","id","kind","remote","_registerEvents","Boolean","mediaStreamTrackSetEnabled","muted","stop","_switchCamera","Error","mediaStreamTrackSwitchCamera","_setVideoEffect","name","mediaStreamTrackSetVideoEffect","_setMutedInternal","dispatchEvent","_setVolume","volume","mediaStreamTrackSetVolume","applyConstraints","clone","getCapabilities","getConstraints","getSettings","ev","trackId","debug","release","mediaStreamTrackRelease"],"mappings":"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","sourcesContent":["\nimport { defineCustomEventTarget, Event } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport { deepClone } from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\nconst MEDIA_STREAM_TRACK_EVENTS = [ 'ended', 'mute', 'unmute' ];\n\ntype MediaStreamTrackState = 'live' | 'ended';\n\nclass MediaStreamTrack extends defineCustomEventTarget(...MEDIA_STREAM_TRACK_EVENTS) {\n    _constraints: object;\n    _enabled: boolean;\n    _settings: object;\n    _muted: boolean;\n    _peerConnectionId: number;\n    _readyState: MediaStreamTrackState;\n\n    readonly id: string;\n    readonly kind: string;\n    readonly label: string = '';\n    readonly remote: boolean;\n\n    constructor(info) {\n        super();\n\n        this._constraints = info.constraints || {};\n        this._enabled = info.enabled;\n        this._settings = info.settings || {};\n        this._muted = false;\n        this._peerConnectionId = info.peerConnectionId;\n        this._readyState = info.readyState;\n\n        this.id = info.id;\n        this.kind = info.kind;\n        this.remote = info.remote;\n\n        if (!this.remote) {\n            this._registerEvents();\n        }\n    }\n\n    get enabled(): boolean {\n        return this._enabled;\n    }\n\n    set enabled(enabled: boolean) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabled = Boolean(enabled);\n\n        if (this._readyState === 'ended') {\n            return;\n        }\n\n        WebRTCModule.mediaStreamTrackSetEnabled(this.remote ? this._peerConnectionId : -1, this.id, this._enabled);\n    }\n\n    get muted(): boolean {\n        return this._muted;\n    }\n\n    get readyState(): string {\n        return this._readyState;\n    }\n\n    stop(): void {\n        this.enabled = false;\n        this._readyState = 'ended';\n    }\n\n    /**\n     * Private / custom API for switching the cameras on the fly, without the\n     * need for adding / removing tracks or doing any SDP renegotiation.\n     *\n     * This is how the reference application (AppRTCMobile) implements camera\n     * switching.\n     */\n    _switchCamera(): void {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n    }\n\n    _setVideoEffect(name:string) {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSetVideoEffect(this.id, name);\n    }\n\n    /**\n     * Internal function which is used to set the muted state on remote tracks and\n     * emit the mute / unmute event.\n     *\n     * @param muted Whether the track should be marked as muted / unmuted.\n     */\n    _setMutedInternal(muted: boolean) {\n        if (!this.remote) {\n            throw new Error('Track is not remote!');\n        }\n\n        this._muted = muted;\n        this.dispatchEvent(new Event(muted ? 'mute' : 'unmute'));\n    }\n\n    /**\n     * Custom API for setting the volume on an individual audio track.\n     *\n     * @param volume a gain value in the range of 0-10. defaults to 1.0\n     */\n    _setVolume(volume: number) {\n        if (this.kind !== 'audio') {\n            throw new Error('Only implemented for audio tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSetVolume(this.remote ? this._peerConnectionId : -1, this.id, volume);\n    }\n\n    applyConstraints(): never {\n        throw new Error('Not implemented.');\n    }\n\n    clone(): never {\n        throw new Error('Not implemented.');\n    }\n\n    getCapabilities(): never {\n        throw new Error('Not implemented.');\n    }\n\n    getConstraints() {\n        return deepClone(this._constraints);\n    }\n\n    getSettings() {\n        return deepClone(this._settings);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'mediaStreamTrackEnded', (ev: any) => {\n            if (ev.trackId !== this.id || this._readyState === 'ended') {\n                return;\n            }\n\n            log.debug(`${this.id} mediaStreamTrackEnded`);\n            this._readyState = 'ended';\n\n            // @ts-ignore\n            this.dispatchEvent(new Event('ended'));\n        });\n    }\n\n    release(): void {\n        if (this.remote) {\n            return;\n        }\n\n        removeListener(this);\n        WebRTCModule.mediaStreamTrackRelease(this.id);\n    }\n}\n\nexport default MediaStreamTrack;\n"]}