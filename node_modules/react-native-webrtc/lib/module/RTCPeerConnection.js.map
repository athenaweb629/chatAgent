{"version":3,"sources":["RTCPeerConnection.ts"],"names":["defineCustomEventTarget","NativeModules","addListener","removeListener","Logger","MediaStream","MediaStreamTrack","MediaStreamTrackEvent","RTCDataChannel","RTCDataChannelEvent","RTCEvent","RTCIceCandidate","RTCIceCandidateEvent","RTCRtpReceiveParameters","RTCRtpReceiver","RTCRtpSendParameters","RTCRtpSender","RTCRtpTransceiver","RTCSessionDescription","RTCTrackEvent","RTCUtil","log","WebRTCModule","PEER_CONNECTION_EVENTS","nextPeerConnectionId","RTCPeerConnection","constructor","configuration","_pcId","peerConnectionInit","_transceivers","_remoteStreams","Map","_pendingTrackEvents","_registerEvents","debug","createOffer","options","sdpInfo","transceiversInfo","peerConnectionCreateOffer","normalizeOfferOptions","_updateTransceivers","createAnswer","peerConnectionCreateAnswer","setConfiguration","peerConnectionSetConfiguration","setLocalDescription","sessionDescription","desc","type","sdp","isSdpTypeValid","Error","peerConnectionSetLocalDescription","localDescription","setRemoteDescription","Promise","reject","newTransceivers","peerConnectionSetRemoteDescription","remoteDescription","forEach","t","transceiverOrder","transceiver","newSender","sender","track","remoteTrack","receiver","newReceiver","newTransceiver","_insertTransceiverSorted","pendingTrackEvents","ev","getTransceivers","filter","id","_mid","mid","_currentDirection","currentDirection","_direction","direction","streams","map","streamInfo","has","streamId","stream","streamReactTag","tracks","set","get","_tracks","includes","push","eventData","dispatchEvent","_setMutedInternal","addIceCandidate","candidate","sdpMLineIndex","undefined","sdpMid","TypeError","newSdp","peerConnectionAddICECandidate","toJSON","addTrack","connectionState","_trackExists","streamIds","s","result","peerConnectionAddTrack","existingSender","getSenders","_track","existingTransceiver","addTransceiver","source","init","src","trackId","peerConnectionAddTransceiver","removeTrack","_peerConnectionId","find","peerConnectionRemoveTrack","getStats","selector","data","peerConnectionGetStats","JSON","parse","senders","receivers","getReceivers","r","matches","length","sr","e","stopped","Boolean","close","peerConnectionClose","_setStopped","restartIce","peerConnectionRestartIce","pcId","iceConnectionState","peerConnectionDispose","signalingState","receiverId","values","trackIdx","indexOf","splice","iceGatheringState","channel","dataChannel","muted","createDataChannel","label","dataChannelDict","channelInfo","transceiverUpdates","removeStopped","update","transceiverId","_stopped","isStopped","_sender","_rtpParameters","senderRtpParameters","_receiver","receiverRtpParameters","order","sort","a","b"],"mappings":"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","sourcesContent":["\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport MediaStream from './MediaStream';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCEvent from './RTCEvent';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCRtpReceiveParameters from './RTCRtpReceiveParameters';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSendParameters from './RTCRtpSendParameters';\nimport RTCRtpSender from './RTCRtpSender';\nimport RTCRtpTransceiver from './RTCRtpTransceiver';\nimport RTCSessionDescription, { RTCSessionDescriptionInit } from './RTCSessionDescription';\nimport RTCTrackEvent from './RTCTrackEvent';\nimport * as RTCUtil from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\ntype RTCSignalingState =\n    | 'stable'\n    | 'have-local-offer'\n    | 'have-remote-offer'\n    | 'have-local-pranswer'\n    | 'have-remote-pranswer'\n    | 'closed';\n\ntype RTCIceGatheringState = 'new' | 'gathering' | 'complete';\n\ntype RTCPeerConnectionState = 'new' | 'connecting' | 'connected' | 'disconnected' | 'failed' | 'closed';\n\ntype RTCIceConnectionState = 'new' | 'checking' | 'connected' | 'completed' | 'failed' | 'disconnected' | 'closed';\n\ntype RTCDataChannelInit = {\n    ordered?: boolean,\n    maxPacketLifeTime?: number,\n    maxRetransmits?: number,\n    protocol?: string,\n    negotiated?: boolean,\n    id?: number\n};\n\nconst PEER_CONNECTION_EVENTS = [\n    'connectionstatechange',\n    'icecandidate',\n    'icecandidateerror',\n    'iceconnectionstatechange',\n    'icegatheringstatechange',\n    'negotiationneeded',\n    'signalingstatechange',\n    'datachannel',\n    'track',\n    'error'\n];\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends defineCustomEventTarget(...PEER_CONNECTION_EVENTS) {\n    localDescription: RTCSessionDescription | null = null;\n    remoteDescription: RTCSessionDescription | null = null;\n\n    signalingState: RTCSignalingState = 'stable';\n    iceGatheringState: RTCIceGatheringState = 'new';\n    connectionState: RTCPeerConnectionState = 'new';\n    iceConnectionState: RTCIceConnectionState = 'new';\n\n    _pcId: number;\n    _transceivers: { order: number, transceiver: RTCRtpTransceiver }[];\n    _remoteStreams: Map<string, MediaStream>;\n    _pendingTrackEvents: any[];\n\n    constructor(configuration) {\n        super();\n\n        this._pcId = nextPeerConnectionId++;\n        WebRTCModule.peerConnectionInit(configuration, this._pcId);\n\n        this._transceivers = [];\n        this._remoteStreams = new Map();\n        this._pendingTrackEvents = [];\n\n        this._registerEvents();\n\n        log.debug(`${this._pcId} ctor`);\n    }\n\n    async createOffer(options) {\n        log.debug(`${this._pcId} createOffer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateOffer(this._pcId, RTCUtil.normalizeOfferOptions(options));\n\n        log.debug(`${this._pcId} createOffer OK`);\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    async createAnswer() {\n        log.debug(`${this._pcId} createAnswer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateAnswer(this._pcId, {});\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    setConfiguration(configuration): void {\n        WebRTCModule.peerConnectionSetConfiguration(configuration, this._pcId);\n    }\n\n    async setLocalDescription(sessionDescription?: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setLocalDescription`);\n\n        let desc;\n\n        if (sessionDescription) {\n            desc = {\n                type: sessionDescription.type,\n                sdp: sessionDescription.sdp ?? ''\n            };\n\n            if (!RTCUtil.isSdpTypeValid(desc.type)) {\n                throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n            }\n        } else {\n            desc = null;\n        }\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetLocalDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.localDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.localDescription = null;\n        }\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc?.type === 'answer');\n\n        log.debug(`${this._pcId} setLocalDescription OK`);\n    }\n\n    async setRemoteDescription(sessionDescription: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setRemoteDescription`);\n\n        if (!sessionDescription) {\n            return Promise.reject(new Error('No session description provided'));\n        }\n\n        const desc = {\n            type: sessionDescription.type,\n            sdp: sessionDescription.sdp ?? ''\n        };\n\n        if (!RTCUtil.isSdpTypeValid(desc.type ?? '')) {\n            throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n        }\n\n        const {\n            sdpInfo,\n            newTransceivers,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetRemoteDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.remoteDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.remoteDescription = null;\n        }\n\n        newTransceivers?.forEach(t => {\n            const { transceiverOrder, transceiver } = t;\n            const newSender = new RTCRtpSender({ ...transceiver.sender, track: null });\n            const remoteTrack\n                = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n            const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n            const newTransceiver = new RTCRtpTransceiver({\n                ...transceiver,\n                sender: newSender,\n                receiver: newReceiver,\n            });\n\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n        });\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc.type === 'answer');\n\n        // Fire track events. They must fire before sRD resolves.\n        const pendingTrackEvents = this._pendingTrackEvents;\n\n        this._pendingTrackEvents = [];\n\n        for (const ev of pendingTrackEvents) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.receiver.id ===  ev.receiver.id);\n\n            // We need to fire this event for an existing track sometimes, like\n            // when the transceiver direction (on the sending side) switches from\n            // sendrecv to recvonly and then back.\n\n            // @ts-ignore\n            const track: MediaStreamTrack = transceiver.receiver.track;\n\n            transceiver._mid = ev.transceiver.mid;\n            transceiver._currentDirection = ev.transceiver.currentDirection;\n            transceiver._direction = ev.transceiver.direction;\n\n            // Get the stream object from the event. Create if necessary.\n            const streams: MediaStream[] = ev.streams.map(streamInfo => {\n                // Here we are making sure that we don't create stream objects that already exist\n                // So that event listeners do get the same object if it has been created before.\n                if (!this._remoteStreams.has(streamInfo.streamId)) {\n                    const stream = new MediaStream({\n                        streamId: streamInfo.streamId,\n                        streamReactTag: streamInfo.streamReactTag,\n                        tracks: []\n                    });\n\n                    this._remoteStreams.set(streamInfo.streamId, stream);\n                }\n\n                const stream = this._remoteStreams.get(streamInfo.streamId);\n\n                if (!stream?._tracks.includes(track)) {\n                    stream?._tracks.push(track);\n                }\n\n                return stream;\n            });\n\n            const eventData = {\n                streams,\n                transceiver,\n                track,\n                receiver: transceiver.receiver\n            };\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCTrackEvent('track', eventData));\n\n            streams.forEach(stream => {\n                // @ts-ignore\n                stream.dispatchEvent(new MediaStreamTrackEvent('addtrack', { track }));\n            });\n\n            // Dispatch an unmute event for the track.\n            track._setMutedInternal(false);\n        }\n\n        log.debug(`${this._pcId} setRemoteDescription OK`);\n    }\n\n    async addIceCandidate(candidate): Promise<void> {\n        log.debug(`${this._pcId} addIceCandidate`);\n\n        if (!candidate || !candidate.candidate) {\n            // XXX end-of candidates is not implemented: https://bugs.chromium.org/p/webrtc/issues/detail?id=9218\n            return;\n        }\n\n        if (\n            candidate.sdpMLineIndex === null ||\n            candidate.sdpMLineIndex === undefined ||\n            candidate.sdpMid === null ||\n            candidate.sdpMid === undefined\n        ) {\n            throw new TypeError('`sdpMLineIndex` and `sdpMid` must not null or undefined');\n        }\n\n        const newSdp = await WebRTCModule.peerConnectionAddICECandidate(\n            this._pcId,\n            candidate.toJSON ? candidate.toJSON() : candidate\n        );\n\n        this.remoteDescription = new RTCSessionDescription(newSdp);\n    }\n\n    /**\n     * @brief Adds a new track to the {@link RTCPeerConnection},\n     * and indicates that it is contained in the specified {@link MediaStream}s.\n     * This method has to be synchronous as the W3C API expects a track to be returned\n     * @param {MediaStreamTrack} track The track to be added\n     * @param {...MediaStream} streams One or more {@link MediaStream}s the track needs to be added to\n     * https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack\n     */\n    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender {\n        log.debug(`${this._pcId} addTrack`);\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        if (this._trackExists(track)) {\n            throw new Error('Track already exists in a sender');\n        }\n\n        const streamIds = streams.map(s => s.id);\n        const result = WebRTCModule.peerConnectionAddTrack(this._pcId, track.id, { streamIds });\n\n        if (result === null) {\n            throw new Error('Could not add sender');\n        }\n\n        const { transceiverOrder, transceiver, sender } = result;\n\n        // According to the W3C docs, the sender could have been reused, and\n        // so we check if that is the case, and update accordingly.\n        const [ existingSender ] = this\n            .getSenders()\n            .filter(s => s.id === sender.id);\n\n        if (existingSender) {\n            // Update sender\n            existingSender._track = track;\n\n            // Update the corresponding transceiver as well\n            const [ existingTransceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === existingSender.id);\n\n            existingTransceiver._direction = transceiver.direction;\n            existingTransceiver._currentDirection = transceiver.currentDirection;\n\n            return existingSender;\n        }\n\n        // This is a new transceiver, should create a transceiver for it and add it\n        const newSender = new RTCRtpSender({ ...transceiver.sender, track });\n        const remoteTrack = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n        const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n        const newTransceiver = new RTCRtpTransceiver({\n            ...transceiver,\n            sender: newSender,\n            receiver: newReceiver,\n        });\n\n        this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n\n        return newSender;\n    }\n\n    addTransceiver(source: 'audio' | 'video' | MediaStreamTrack, init): RTCRtpTransceiver {\n        log.debug(`${this._pcId} addTransceiver`);\n\n        let src = {};\n\n        if (source === 'audio') {\n            src = { type: 'audio' };\n        } else if (source === 'video') {\n            src = { type: 'video' };\n        } else {\n            src = { trackId: source.id };\n        }\n\n        // Extract the stream ids\n        if (init && init.streams) {\n            init.streamIds = init.streams.map(stream => stream.id);\n        }\n\n        const result = WebRTCModule.peerConnectionAddTransceiver(this._pcId, { ...src, init: { ...init } });\n\n        if (result === null) {\n            throw new Error('Transceiver could not be added');\n        }\n\n        const t = result.transceiver;\n        let track: MediaStreamTrack | null = null;\n\n        if (typeof source === 'string') {\n            if (t.sender.track) {\n                track = new MediaStreamTrack(t.sender.track);\n            }\n        } else {\n            // 'source' is a MediaStreamTrack\n            track = source;\n        }\n\n        const sender = new RTCRtpSender({ ...t.sender, track });\n        const remoteTrack = t.receiver.track ? new MediaStreamTrack(t.receiver.track) : null;\n        const receiver = new RTCRtpReceiver({ ...t.receiver, track: remoteTrack });\n        const transceiver = new RTCRtpTransceiver({\n            ...result.transceiver,\n            sender,\n            receiver\n        });\n\n        this._insertTransceiverSorted(result.transceiverOrder, transceiver);\n\n        return transceiver;\n    }\n\n    removeTrack(sender: RTCRtpSender) {\n        log.debug(`${this._pcId} removeTrack`);\n\n        if (this._pcId !== sender._peerConnectionId) {\n            throw new Error('Sender does not belong to this peer connection');\n        }\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        const existingSender = this\n            .getSenders()\n            .find(s => s === sender);\n\n        if (!existingSender) {\n            throw new Error('Sender does not exist');\n        }\n\n        if (existingSender.track === null) {\n            return;\n        }\n\n        // Blocking!\n        WebRTCModule.peerConnectionRemoveTrack(this._pcId, sender.id);\n\n        existingSender._track = null;\n\n        const [ existingTransceiver ] = this\n            .getTransceivers()\n            .filter(t => t.sender.id === existingSender.id);\n\n        existingTransceiver._direction = existingTransceiver.direction === 'sendrecv' ? 'recvonly' : 'inactive';\n    }\n\n    async getStats(selector?: MediaStreamTrack) {\n        log.debug(`${this._pcId} getStats`);\n\n        if (!selector) {\n            const data = await WebRTCModule.peerConnectionGetStats(this._pcId);\n\n            /**\n             * On both Android and iOS it is faster to construct a single\n             * JSON string representing the Map of StatsReports and have it\n             * pass through the React Native bridge rather than the Map of\n             * StatsReports. While the implementations do try to be faster in\n             * general, the stress is on being faster to pass through the React\n             * Native bridge which is a bottleneck that tends to be visible in\n             * the UI when there is congestion involving UI-related passing.\n             */\n            return new Map(JSON.parse(data));\n        } else {\n            const senders = this.getSenders().filter(s => s.track === selector);\n            const receivers = this.getReceivers().filter(r => r.track === selector);\n            const matches = senders.length + receivers.length;\n\n            if (matches === 0) {\n                throw new Error('Invalid selector: could not find matching sender / receiver');\n            } else if (matches > 1) {\n                throw new Error('Invalid selector: multiple matching senders / receivers');\n            } else {\n                const sr = senders[0] || receivers[0];\n\n                return sr.getStats();\n            }\n        }\n    }\n\n    getTransceivers(): RTCRtpTransceiver[] {\n        return this._transceivers.map(e => e.transceiver);\n    }\n\n    getSenders(): RTCRtpSender[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.sender).filter(Boolean);\n    }\n\n    getReceivers(): RTCRtpReceiver[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.receiver).filter(Boolean);\n    }\n\n    close(): void {\n        log.debug(`${this._pcId} close`);\n\n        if (this.connectionState === 'closed') {\n            return;\n        }\n\n        WebRTCModule.peerConnectionClose(this._pcId);\n\n        // Mark transceivers as stopped.\n        this._transceivers.forEach(({ transceiver })=> {\n            transceiver._setStopped();\n        });\n    }\n\n    restartIce(): void {\n        WebRTCModule.peerConnectionRestartIce(this._pcId);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'peerConnectionOnRenegotiationNeeded', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('negotiationneeded'));\n        });\n\n        addListener(this, 'peerConnectionIceConnectionChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceConnectionState = ev.iceConnectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('iceconnectionstatechange'));\n        });\n\n        addListener(this, 'peerConnectionStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.connectionState = ev.connectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('connectionstatechange'));\n\n            if (ev.connectionState === 'closed') {\n                // This PeerConnection is done, clean up.\n                removeListener(this);\n\n                WebRTCModule.peerConnectionDispose(this._pcId);\n            }\n        });\n\n        addListener(this, 'peerConnectionSignalingStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.signalingState = ev.signalingState;\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('signalingstatechange'));\n        });\n\n        // Consider moving away from this event: https://github.com/WebKit/WebKit/pull/3953\n        addListener(this, 'peerConnectionOnTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} ontrack`);\n\n            // NOTE: We need to make sure the track event fires right before sRD completes,\n            // so we queue them up here and dispatch the events when sRD fires, but before completing it.\n            // In the future we should probably implement out own logic and drop this event altogether.\n            this._pendingTrackEvents.push(ev);\n        });\n\n        addListener(this, 'peerConnectionOnRemoveTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} onremovetrack ${ev.receiverId}`);\n\n            const receiver = this.getReceivers().find(r => r.id === ev.receiverId);\n            const track = receiver?.track;\n\n            if (receiver && track) {\n                // As per the spec:\n                // - Remove the track from any media streams that were previously passed to the `track` event.\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-removetrack,\n                // - Mark the track as muted:\n                // https://w3c.github.io/webrtc-pc/#process-remote-track-removal\n                for (const stream of this._remoteStreams.values()) {\n                    if (stream._tracks.includes(track)) {\n                        const trackIdx = stream._tracks.indexOf(track);\n\n                        log.debug(`${this._pcId} removetrack ${track.id}`);\n\n                        stream._tracks.splice(trackIdx, 1);\n\n                        // @ts-ignore\n                        stream.dispatchEvent(new MediaStreamTrackEvent('removetrack', { track }));\n\n                        // Dispatch a mute event for the track.\n                        track._setMutedInternal(true);\n                    }\n                }\n            }\n        });\n\n        addListener(this, 'peerConnectionGotICECandidate', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const sdpInfo = ev.sdp;\n\n            // Can happen when doing a rollback.\n            if (sdpInfo.type && sdpInfo.sdp) {\n                this.localDescription = new RTCSessionDescription(sdpInfo);\n            } else {\n                this.localDescription = null;\n            }\n\n            const candidate = new RTCIceCandidate(ev.candidate);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate }));\n        });\n\n        addListener(this, 'peerConnectionIceGatheringChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceGatheringState = ev.iceGatheringState;\n\n            if (this.iceGatheringState === 'complete') {\n                const sdpInfo = ev.sdp;\n\n                // Can happen when doing a rollback.\n                if (sdpInfo.type && sdpInfo.sdp) {\n                    this.localDescription = new RTCSessionDescription(sdpInfo);\n                } else {\n                    this.localDescription = null;\n                }\n\n                // @ts-ignore\n                this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate: null }));\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('icegatheringstatechange'));\n        });\n\n        addListener(this, 'peerConnectionDidOpenDataChannel', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const channel = new RTCDataChannel(ev.dataChannel);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCDataChannelEvent('datachannel', { channel }));\n        });\n\n        addListener(this, 'mediaStreamTrackMuteChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const [\n                track\n            ] = this.getReceivers().map(r => r.track).filter(t => t?.id === ev.trackId);\n\n            if (track) {\n                track._setMutedInternal(ev.muted);\n            }\n        });\n    }\n\n    /**\n     * Creates a new RTCDataChannel object with the given label. The\n     * RTCDataChannelInit dictionary can be used to configure properties of the\n     * underlying channel such as data reliability.\n     *\n     * @param {string} label - the value with which the label attribute of the new\n     * instance is to be initialized\n     * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n     * values with which to initialize corresponding attributes of the new\n     * instance such as id\n     */\n    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel {\n        if (dataChannelDict && 'id' in dataChannelDict) {\n            const id = dataChannelDict.id;\n\n            if (typeof id !== 'number') {\n                throw new TypeError('DataChannel id must be a number: ' + id);\n            }\n        }\n\n        const channelInfo = WebRTCModule.createDataChannel(this._pcId, label, dataChannelDict);\n\n        if (channelInfo === null) {\n            throw new TypeError('Failed to create new DataChannel');\n        }\n\n        return new RTCDataChannel(channelInfo);\n    }\n\n    /**\n     * Check whether a media stream track exists already in a sender.\n     * See https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack for more information\n     */\n    _trackExists(track: MediaStreamTrack): boolean {\n        const [ sender ] = this\n            .getSenders()\n            .filter(\n                sender => sender.track?.id === track.id\n            );\n\n        return sender? true : false;\n    }\n\n    /**\n     * Updates transceivers after offer/answer updates if necessary.\n     */\n    _updateTransceivers(transceiverUpdates, removeStopped = false) {\n        for (const update of transceiverUpdates) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === update.transceiverId);\n\n            if (!transceiver) {\n                continue;\n            }\n\n            transceiver._currentDirection = update.currentDirection;\n            transceiver._mid = update.mid;\n            transceiver._stopped = Boolean(update.isStopped);\n            transceiver._sender._rtpParameters = new RTCRtpSendParameters(update.senderRtpParameters);\n            transceiver._receiver._rtpParameters = new RTCRtpReceiveParameters(update.receiverRtpParameters);\n        }\n\n        if (removeStopped) {\n            const stopped = this.getTransceivers().filter(t => t.stopped);\n            const newTransceivers = this._transceivers.filter(t => !stopped.includes(t.transceiver));\n\n            this._transceivers = newTransceivers;\n        }\n    }\n\n    /**\n     * Inserts transceiver into the transceiver array in the order they are created (timestamp).\n     * @param order an index that refers to when it it was created relatively.\n     * @param transceiver the transceiver object to be inserted.\n     */\n    _insertTransceiverSorted(order: number, transceiver: RTCRtpTransceiver) {\n        this._transceivers.push({ order, transceiver });\n        this._transceivers.sort((a, b) => a.order - b.order);\n    }\n}\n"]}