{"version":3,"sources":["RTCRtpEncodingParameters.ts"],"names":["RTCRtpEncodingParameters","constructor","init","active","_rid","rid","_maxBitrate","maxBitrate","_maxFramerate","maxFramerate","_scaleResolutionDownBy","scaleResolutionDownBy","framerate","bitrate","resolutionScale","toJSON","obj"],"mappings":";;AAQA,eAAe,MAAMA,wBAAN,CAA+B;AAO1CC,EAAAA,WAAW,CAACC,IAAD,EAAqC;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC5C,SAAKC,MAAL,GAAcD,IAAI,CAACC,MAAnB;AACA,SAAKC,IAAL,gBAAYF,IAAI,CAACG,GAAjB,iDAAwB,IAAxB;AACA,SAAKC,WAAL,uBAAmBJ,IAAI,CAACK,UAAxB,+DAAsC,IAAtC;AACA,SAAKC,aAAL,yBAAqBN,IAAI,CAACO,YAA1B,mEAA0C,IAA1C;AACA,SAAKC,sBAAL,4BAA8BR,IAAI,CAACS,qBAAnC,yEAA4D,IAA5D;AACH;;AAEM,MAAHN,GAAG,GAAG;AACN,WAAO,KAAKD,IAAZ;AACH;;AAEe,MAAZK,YAAY,GAAG;AACf,WAAO,KAAKD,aAAZ;AACH;;AAEe,MAAZC,YAAY,CAACG,SAAD,EAAY;AACxB;AACA,QAAIA,SAAS,IAAI,IAAb,IAAqBA,SAAS,GAAG,CAArC,EAAwC;AACpC,WAAKJ,aAAL,GAAqBI,SAArB;AACH,KAFD,MAEO;AACH,WAAKJ,aAAL,GAAqB,IAArB;AACH;AACJ;;AAEa,MAAVD,UAAU,GAAG;AACb,WAAO,KAAKD,WAAZ;AACH;;AAEa,MAAVC,UAAU,CAACM,OAAD,EAAU;AACpB;AACA,QAAIA,OAAO,IAAI,IAAX,IAAmBA,OAAO,IAAI,CAAlC,EAAqC;AACjC,WAAKP,WAAL,GAAmBO,OAAnB;AACH,KAFD,MAEO;AACH,WAAKP,WAAL,GAAmB,IAAnB;AACH;AACJ;;AAEwB,MAArBK,qBAAqB,GAAG;AACxB,WAAO,KAAKD,sBAAZ;AACH;;AAEwB,MAArBC,qBAAqB,CAACG,eAAD,EAAkB;AACvC;AACA,QAAIA,eAAe,IAAI,IAAnB,IAA2BA,eAAe,IAAI,CAAlD,EAAqD;AACjD,WAAKJ,sBAAL,GAA8BI,eAA9B;AACH,KAFD,MAEO;AACH,WAAKJ,sBAAL,GAA8B,IAA9B;AACH;AACJ;;AAEDK,EAAAA,MAAM,GAAiC;AACnC,UAAMC,GAAG,GAAG;AACRb,MAAAA,MAAM,EAAE,KAAKA;AADL,KAAZ;;AAIA,QAAI,KAAKC,IAAL,KAAc,IAAlB,EAAwB;AACpBY,MAAAA,GAAG,CAAC,KAAD,CAAH,GAAa,KAAKZ,IAAlB;AACH;;AAED,QAAI,KAAKE,WAAL,KAAqB,IAAzB,EAA+B;AAC3BU,MAAAA,GAAG,CAAC,YAAD,CAAH,GAAoB,KAAKV,WAAzB;AACH;;AAED,QAAI,KAAKE,aAAL,KAAuB,IAA3B,EAAiC;AAC7BQ,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAKR,aAA3B;AACH;;AAED,QAAI,KAAKE,sBAAL,KAAgC,IAApC,EAA0C;AACtCM,MAAAA,GAAG,CAAC,uBAAD,CAAH,GAA+B,KAAKN,sBAApC;AACH;;AAED,WAAOM,GAAP;AACH;;AAhFyC","sourcesContent":["export interface RTCRtpEncodingParametersInit {\n    active: boolean,\n    rid?: string;\n    maxFramerate?: number;\n    maxBitrate?: number;\n    scaleResolutionDownBy?: number;\n}\n\nexport default class RTCRtpEncodingParameters {\n    active: boolean;\n    _rid: string | null;\n    _maxFramerate: number | null;\n    _maxBitrate: number | null;\n    _scaleResolutionDownBy: number | null;\n\n    constructor(init: RTCRtpEncodingParametersInit) {\n        this.active = init.active;\n        this._rid = init.rid ?? null;\n        this._maxBitrate = init.maxBitrate ?? null;\n        this._maxFramerate = init.maxFramerate ?? null;\n        this._scaleResolutionDownBy = init.scaleResolutionDownBy ?? null;\n    }\n\n    get rid() {\n        return this._rid;\n    }\n\n    get maxFramerate() {\n        return this._maxFramerate;\n    }\n\n    set maxFramerate(framerate) {\n        // eslint-disable-next-line eqeqeq\n        if (framerate != null && framerate > 0) {\n            this._maxFramerate = framerate;\n        } else {\n            this._maxFramerate = null;\n        }\n    }\n\n    get maxBitrate() {\n        return this._maxBitrate;\n    }\n\n    set maxBitrate(bitrate) {\n        // eslint-disable-next-line eqeqeq\n        if (bitrate != null && bitrate >= 0) {\n            this._maxBitrate = bitrate;\n        } else {\n            this._maxBitrate = null;\n        }\n    }\n\n    get scaleResolutionDownBy() {\n        return this._scaleResolutionDownBy;\n    }\n\n    set scaleResolutionDownBy(resolutionScale) {\n        // eslint-disable-next-line eqeqeq\n        if (resolutionScale != null && resolutionScale >= 1) {\n            this._scaleResolutionDownBy = resolutionScale;\n        } else {\n            this._scaleResolutionDownBy = null;\n        }\n    }\n\n    toJSON(): RTCRtpEncodingParametersInit {\n        const obj = {\n            active: this.active,\n        };\n\n        if (this._rid !== null) {\n            obj['rid'] = this._rid;\n        }\n\n        if (this._maxBitrate !== null) {\n            obj['maxBitrate'] = this._maxBitrate;\n        }\n\n        if (this._maxFramerate !== null) {\n            obj['maxFramerate'] = this._maxFramerate;\n        }\n\n        if (this._scaleResolutionDownBy !== null) {\n            obj['scaleResolutionDownBy'] = this._scaleResolutionDownBy;\n        }\n\n        return obj;\n    }\n}\n"]}