{"version":3,"sources":["getUserMedia.ts"],"names":["WebRTCModule","NativeModules","getUserMedia","constraints","Promise","reject","TypeError","audio","video","RTCUtil","normalizeConstraints","reqPermissions","push","permissions","request","name","resolve","all","then","results","audioPerm","videoPerm","error","message","MediaStreamError","success","id","tracks","trackInfo","c","kind","deepClone","info","streamId","streamReactTag","MediaStream","failure","type"],"mappings":";;;;;;;AACA;;AAGA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,0BAAzB;;AAOe,SAASC,YAAT,GAA2E;AAAA,MAArDC,WAAqD,uEAA1B,EAA0B;;AACtF;AACA;AACA;AACA,MAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACjC,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,SAAJ,CAAc,iCAAd,CAAf,CAAP;AACH;;AAED,MACI,CAAC,OAAOH,WAAW,CAACI,KAAnB,KAA6B,WAA7B,IAA4C,CAACJ,WAAW,CAACI,KAA1D,MACC,OAAOJ,WAAW,CAACK,KAAnB,KAA6B,WAA7B,IAA4C,CAACL,WAAW,CAACK,KAD1D,CADJ,EAGE;AACE,WAAOJ,OAAO,CAACC,MAAR,CAAe,IAAIC,SAAJ,CAAc,gCAAd,CAAf,CAAP;AACH,GAbqF,CAetF;;;AACAH,EAAAA,WAAW,GAAGM,OAAO,CAACC,oBAAR,CAA6BP,WAA7B,CAAd,CAhBsF,CAkBtF;;AACA,QAAMQ,cAAkC,GAAG,EAA3C;;AAEA,MAAIR,WAAW,CAACI,KAAhB,EAAuB;AACnBI,IAAAA,cAAc,CAACC,IAAf,CAAoBC,qBAAYC,OAAZ,CAAoB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAApB,CAApB;AACH,GAFD,MAEO;AACHJ,IAAAA,cAAc,CAACC,IAAf,CAAoBR,OAAO,CAACY,OAAR,CAAgB,KAAhB,CAApB;AACH;;AAED,MAAIb,WAAW,CAACK,KAAhB,EAAuB;AACnBG,IAAAA,cAAc,CAACC,IAAf,CAAoBC,qBAAYC,OAAZ,CAAoB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAApB,CAApB;AACH,GAFD,MAEO;AACHJ,IAAAA,cAAc,CAACC,IAAf,CAAoBR,OAAO,CAACY,OAAR,CAAgB,KAAhB,CAApB;AACH;;AAED,SAAO,IAAIZ,OAAJ,CAAY,CAACY,OAAD,EAAUX,MAAV,KAAqB;AACpCD,IAAAA,OAAO,CAACa,GAAR,CAAYN,cAAZ,EAA4BO,IAA5B,CAAiCC,OAAO,IAAI;AACxC,YAAM,CAAEC,SAAF,EAAaC,SAAb,IAA2BF,OAAjC,CADwC,CAGxC;;AAEA,UAAI,CAACC,SAAD,IAAc,CAACC,SAAnB,EAA8B;AAC1B;AACA;AACA,cAAMC,KAAK,GAAG;AACVC,UAAAA,OAAO,EAAE,oBADC;AAEVR,UAAAA,IAAI,EAAE;AAFI,SAAd;AAKAV,QAAAA,MAAM,CAAC,IAAImB,yBAAJ,CAAqBF,KAArB,CAAD,CAAN;AAEA;AACH;;AAEDF,MAAAA,SAAS,IAAI,OAAOjB,WAAW,CAACI,KAAhC;AACAc,MAAAA,SAAS,IAAI,OAAOlB,WAAW,CAACK,KAAhC;;AAEA,YAAMiB,OAAO,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgB;AAC5B;AACA,aAAK,MAAMC,SAAX,IAAwBD,MAAxB,EAAgC;AAC5B,gBAAME,CAAC,GAAG1B,WAAW,CAACyB,SAAS,CAACE,IAAX,CAArB;;AAEA,cAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;AACvBD,YAAAA,SAAS,CAACzB,WAAV,GAAwBM,OAAO,CAACsB,SAAR,CAAkBF,CAAlB,CAAxB;AACH;AACJ;;AAED,cAAMG,IAAI,GAAG;AACTC,UAAAA,QAAQ,EAAEP,EADD;AAETQ,UAAAA,cAAc,EAAER,EAFP;AAGTC,UAAAA;AAHS,SAAb;AAMAX,QAAAA,OAAO,CAAC,IAAImB,oBAAJ,CAAgBH,IAAhB,CAAD,CAAP;AACH,OAjBD;;AAmBA,YAAMI,OAAO,GAAG,CAACC,IAAD,EAAOd,OAAP,KAAmB;AAC/B,YAAID,KAAJ;;AAEA,gBAAQe,IAAR;AACI,eAAK,WAAL;AACIf,YAAAA,KAAK,GAAG,IAAIhB,SAAJ,CAAciB,OAAd,CAAR;AACA;AAHR;;AAMA,YAAI,CAACD,KAAL,EAAY;AACRA,UAAAA,KAAK,GAAG,IAAIE,yBAAJ,CAAqB;AAAED,YAAAA,OAAF;AAAWR,YAAAA,IAAI,EAAEsB;AAAjB,WAArB,CAAR;AACH;;AAEDhC,QAAAA,MAAM,CAACiB,KAAD,CAAN;AACH,OAdD;;AAgBAtB,MAAAA,YAAY,CAACE,YAAb,CAA0BC,WAA1B,EAAuCsB,OAAvC,EAAgDW,OAAhD;AACH,KAzDD;AA0DH,GA3DM,CAAP;AA4DH","sourcesContent":["\nimport { NativeModules } from 'react-native';\n\n\nimport MediaStream from './MediaStream';\nimport MediaStreamError from './MediaStreamError';\nimport permissions from './Permissions';\nimport * as RTCUtil from './RTCUtil';\n\nconst { WebRTCModule } = NativeModules;\n\ninterface Constraints {\n    audio?: boolean | object;\n    video?: boolean | object;\n}\n\nexport default function getUserMedia(constraints: Constraints = {}): Promise<MediaStream> {\n    // According to\n    // https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-getusermedia,\n    // the constraints argument is a dictionary of type MediaStreamConstraints.\n    if (typeof constraints !== 'object') {\n        return Promise.reject(new TypeError('constraints is not a dictionary'));\n    }\n\n    if (\n        (typeof constraints.audio === 'undefined' || !constraints.audio) &&\n        (typeof constraints.video === 'undefined' || !constraints.video)\n    ) {\n        return Promise.reject(new TypeError('audio and/or video is required'));\n    }\n\n    // Normalize constraints.\n    constraints = RTCUtil.normalizeConstraints(constraints);\n\n    // Request required permissions\n    const reqPermissions: Promise<boolean>[] = [];\n\n    if (constraints.audio) {\n        reqPermissions.push(permissions.request({ name: 'microphone' }));\n    } else {\n        reqPermissions.push(Promise.resolve(false));\n    }\n\n    if (constraints.video) {\n        reqPermissions.push(permissions.request({ name: 'camera' }));\n    } else {\n        reqPermissions.push(Promise.resolve(false));\n    }\n\n    return new Promise((resolve, reject) => {\n        Promise.all(reqPermissions).then(results => {\n            const [ audioPerm, videoPerm ] = results;\n\n            // Check permission results and remove unneeded permissions.\n\n            if (!audioPerm && !videoPerm) {\n                // https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-getusermedia\n                // step 4\n                const error = {\n                    message: 'Permission denied.',\n                    name: 'SecurityError'\n                };\n\n                reject(new MediaStreamError(error));\n\n                return;\n            }\n\n            audioPerm || delete constraints.audio;\n            videoPerm || delete constraints.video;\n\n            const success = (id, tracks) => {\n                // Store initial constraints.\n                for (const trackInfo of tracks) {\n                    const c = constraints[trackInfo.kind];\n\n                    if (typeof c === 'object') {\n                        trackInfo.constraints = RTCUtil.deepClone(c);\n                    }\n                }\n\n                const info = {\n                    streamId: id,\n                    streamReactTag: id,\n                    tracks\n                };\n\n                resolve(new MediaStream(info));\n            };\n\n            const failure = (type, message) => {\n                let error;\n\n                switch (type) {\n                    case 'TypeError':\n                        error = new TypeError(message);\n                        break;\n                }\n\n                if (!error) {\n                    error = new MediaStreamError({ message, name: type });\n                }\n\n                reject(error);\n            };\n\n            WebRTCModule.getUserMedia(constraints, success, failure);\n        });\n    });\n}\n"]}