{"version":3,"sources":["RTCRtpTransceiver.ts"],"names":["WebRTCModule","NativeModules","RTCRtpTransceiver","constructor","args","_peerConnectionId","peerConnectionId","_mid","mid","_direction","direction","_currentDirection","currentDirection","_stopped","Boolean","isStopped","_sender","sender","_receiver","receiver","stopped","val","includes","TypeError","Error","oldDirection","transceiverSetDirection","id","catch","stop","transceiverStop","then","_setStopped"],"mappings":";;;;;;;AAAA;;;;AAKA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,0BAAzB;;AAEe,MAAMC,iBAAN,CAAwB;AAUnCC,EAAAA,WAAW,CAACC,IAAD,EAQR;AAAA;;AAAA;;AAAA;;AAAA,kCAbmB,IAanB;;AAAA;;AAAA;;AAAA;;AACC,SAAKC,iBAAL,GAAyBD,IAAI,CAACE,gBAA9B;AACA,SAAKC,IAAL,GAAYH,IAAI,CAACI,GAAL,GAAWJ,IAAI,CAACI,GAAhB,GAAsB,IAAlC;AACA,SAAKC,UAAL,GAAkBL,IAAI,CAACM,SAAvB;AACA,SAAKC,iBAAL,GAAyBP,IAAI,CAACQ,gBAA9B;AACA,SAAKC,QAAL,GAAgBC,OAAO,CAACV,IAAI,CAACW,SAAN,CAAvB;AACA,SAAKC,OAAL,GAAeZ,IAAI,CAACa,MAApB;AACA,SAAKC,SAAL,GAAiBd,IAAI,CAACe,QAAtB;AACH;;AAEM,MAAHX,GAAG,GAAG;AACN,WAAO,KAAKD,IAAZ;AACH;;AAEU,MAAPa,OAAO,GAAG;AACV,WAAO,KAAKP,QAAZ;AACH;;AAEY,MAATH,SAAS,GAAG;AACZ,WAAO,KAAKD,UAAZ;AACH;;AAEY,MAATC,SAAS,CAACW,GAAD,EAAM;AACf,QAAI,CAAC,CAAE,UAAF,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,EAAmDC,QAAnD,CAA4DD,GAA5D,CAAL,EAAuE;AACnE,YAAM,IAAIE,SAAJ,CAAc,4BAAd,CAAN;AACH;;AAED,QAAI,KAAKV,QAAT,EAAmB;AACf,YAAM,IAAIW,KAAJ,CAAU,qBAAV,CAAN;AACH;;AAED,QAAI,KAAKf,UAAL,KAAoBY,GAAxB,EAA6B;AACzB;AACH;;AAED,UAAMI,YAAY,GAAG,KAAKhB,UAA1B;AAEAT,IAAAA,YAAY,CAAC0B,uBAAb,CAAqC,KAAKrB,iBAA1C,EAA6D,KAAKY,MAAL,CAAYU,EAAzE,EAA6EN,GAA7E,EACKO,KADL,CACW,MAAM;AACT,WAAKnB,UAAL,GAAkBgB,YAAlB;AACH,KAHL;AAKA,SAAKhB,UAAL,GAAkBY,GAAlB;AACH;;AAEmB,MAAhBT,gBAAgB,GAAG;AACnB,WAAO,KAAKD,iBAAZ;AACH;;AAES,MAANM,MAAM,GAAG;AACT,WAAO,KAAKD,OAAZ;AACH;;AAEW,MAARG,QAAQ,GAAG;AACX,WAAO,KAAKD,SAAZ;AACH;;AAEDW,EAAAA,IAAI,GAAG;AACH,QAAI,KAAKhB,QAAT,EAAmB;AACf;AACH;;AAEDb,IAAAA,YAAY,CAAC8B,eAAb,CAA6B,KAAKzB,iBAAlC,EAAqD,KAAKY,MAAL,CAAYU,EAAjE,EACKI,IADL,CACU,MAAM,KAAKC,WAAL,EADhB;AAEH;;AAEDA,EAAAA,WAAW,GAAG;AACV,SAAKnB,QAAL,GAAgB,IAAhB;AACA,SAAKJ,UAAL,GAAkB,SAAlB;AACA,SAAKE,iBAAL,GAAyB,SAAzB;AACA,SAAKJ,IAAL,GAAY,IAAZ;AACH;;AAzFkC","sourcesContent":["import { NativeModules } from 'react-native';\n\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSender from './RTCRtpSender';\n\nconst { WebRTCModule } = NativeModules;\n\nexport default class RTCRtpTransceiver {\n    _peerConnectionId: number;\n    _sender: RTCRtpSender;\n    _receiver: RTCRtpReceiver;\n\n    _mid: string | null = null;\n    _direction: string;\n    _currentDirection: string;\n    _stopped: boolean;\n\n    constructor(args: {\n        peerConnectionId: number,\n        isStopped: boolean,\n        direction: string,\n        currentDirection: string,\n        mid?: string,\n        sender: RTCRtpSender,\n        receiver: RTCRtpReceiver,\n    }) {\n        this._peerConnectionId = args.peerConnectionId;\n        this._mid = args.mid ? args.mid : null;\n        this._direction = args.direction;\n        this._currentDirection = args.currentDirection;\n        this._stopped = Boolean(args.isStopped);\n        this._sender = args.sender;\n        this._receiver = args.receiver;\n    }\n\n    get mid() {\n        return this._mid;\n    }\n\n    get stopped() {\n        return this._stopped;\n    }\n\n    get direction() {\n        return this._direction;\n    }\n\n    set direction(val) {\n        if (![ 'sendonly', 'recvonly', 'sendrecv', 'inactive' ].includes(val)) {\n            throw new TypeError('Invalid direction provided');\n        }\n\n        if (this._stopped) {\n            throw new Error('Transceiver Stopped');\n        }\n\n        if (this._direction === val) {\n            return;\n        }\n\n        const oldDirection = this._direction;\n\n        WebRTCModule.transceiverSetDirection(this._peerConnectionId, this.sender.id, val)\n            .catch(() => {\n                this._direction = oldDirection;\n            });\n\n        this._direction = val;\n    }\n\n    get currentDirection() {\n        return this._currentDirection;\n    }\n\n    get sender() {\n        return this._sender;\n    }\n\n    get receiver() {\n        return this._receiver;\n    }\n\n    stop() {\n        if (this._stopped) {\n            return;\n        }\n\n        WebRTCModule.transceiverStop(this._peerConnectionId, this.sender.id)\n            .then(() => this._setStopped());\n    }\n\n    _setStopped() {\n        this._stopped = true;\n        this._direction = 'stopped';\n        this._currentDirection = 'stopped';\n        this._mid = null;\n    }\n}\n"]}