{"version":3,"sources":["MediaStream.ts"],"names":["WebRTCModule","NativeModules","MEDIA_STREAM_EVENTS","MediaStream","constructor","arg","id","_reactTag","mediaStreamCreate","track","getTracks","addTrack","Array","isArray","streamId","streamReactTag","tracks","trackInfo","_tracks","push","MediaStreamTrack","TypeError","index","indexOf","mediaStreamAddTrack","remote","_peerConnectionId","removeTrack","splice","mediaStreamRemoveTrack","slice","getTrackById","trackId","find","getAudioTracks","filter","kind","getVideoTracks","clone","Error","toURL","release","releaseTracks","mediaStreamRelease"],"mappings":"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","sourcesContent":["\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport MediaStreamTrack from './MediaStreamTrack';\nimport { uniqueID } from './RTCUtil';\n\nconst { WebRTCModule } = NativeModules;\n\nconst MEDIA_STREAM_EVENTS = [ 'active', 'inactive', 'addtrack', 'removetrack' ];\n\nexport default class MediaStream extends defineCustomEventTarget(...MEDIA_STREAM_EVENTS) {\n    id: string;\n    active = true;\n\n    _tracks: MediaStreamTrack[] = [];\n\n    /**\n     * The identifier of this MediaStream unique within the associated\n     * WebRTCModule instance. As the id of a remote MediaStream instance is unique\n     * only within the associated RTCPeerConnection, it is not sufficiently unique\n     * to identify this MediaStream across multiple RTCPeerConnections and to\n     * unambiguously differentiate it from a local MediaStream instance not added\n     * to an RTCPeerConnection.\n     */\n    _reactTag: string;\n\n    /**\n     * A MediaStream can be constructed in several ways, depending on the parameters\n     * that are passed here.\n     *\n     * - undefined: just a new stream, with no tracks.\n     * - MediaStream instance: a new stream, with a copy of the tracks of the passed stream.\n     * - Array of MediaStreamTrack: a new stream with a copy of the tracks in the array.\n     * - object: a new stream instance, represented by the passed info object, this is always\n     *   done internally, when the stream is first created in native and the JS wrapper is\n     *   built afterwards.\n     */\n    constructor(arg) {\n        super();\n\n        // Assigm a UUID to start with. It may get overridden for remote streams.\n        this.id = uniqueID();\n        // Local MediaStreams are created by WebRTCModule to have their id and\n        // reactTag equal because WebRTCModule follows the respective standard's\n        // recommendation for id generation i.e. uses UUID which is unique enough\n        // for the purposes of reactTag.\n        this._reactTag = this.id;\n\n        if (typeof arg === 'undefined') {\n            WebRTCModule.mediaStreamCreate(this.id);\n        } else if (arg instanceof MediaStream) {\n            WebRTCModule.mediaStreamCreate(this.id);\n\n            for (const track of arg.getTracks()) {\n                this.addTrack(track);\n            }\n        } else if (Array.isArray(arg)) {\n            WebRTCModule.mediaStreamCreate(this.id);\n\n            for (const track of arg) {\n                this.addTrack(track);\n            }\n        } else if (typeof arg === 'object' && arg.streamId && arg.streamReactTag && arg.tracks) {\n            this.id = arg.streamId;\n            this._reactTag = arg.streamReactTag;\n\n            for (const trackInfo of arg.tracks) {\n                // We are not using addTrack here because the track is already part of the\n                // stream, so there is no need to add it on the native side.\n                this._tracks.push(new MediaStreamTrack(trackInfo));\n            }\n        } else {\n            throw new TypeError(`invalid type: ${typeof arg}`);\n        }\n    }\n\n    addTrack(track: MediaStreamTrack): void {\n        const index = this._tracks.indexOf(track);\n\n        if (index !== -1) {\n            return;\n        }\n\n        this._tracks.push(track);\n        WebRTCModule.mediaStreamAddTrack(this._reactTag, track.remote ? track._peerConnectionId : -1, track.id);\n    }\n\n    removeTrack(track: MediaStreamTrack): void {\n        const index = this._tracks.indexOf(track);\n\n        if (index === -1) {\n            return;\n        }\n\n        this._tracks.splice(index, 1);\n        WebRTCModule.mediaStreamRemoveTrack(this._reactTag, track.remote ? track._peerConnectionId : -1, track.id);\n    }\n\n    getTracks(): MediaStreamTrack[] {\n        return this._tracks.slice();\n    }\n\n    getTrackById(trackId): MediaStreamTrack | undefined {\n        return this._tracks.find(track => track.id === trackId);\n    }\n\n    getAudioTracks(): MediaStreamTrack[] {\n        return this._tracks.filter(track => track.kind === 'audio');\n    }\n\n    getVideoTracks(): MediaStreamTrack[] {\n        return this._tracks.filter(track => track.kind === 'video');\n    }\n\n    clone(): never {\n        throw new Error('Not implemented.');\n    }\n\n    toURL(): string {\n        return this._reactTag;\n    }\n\n    release(releaseTracks = true): void {\n        const tracks = [ ...this._tracks ];\n\n        for (const track of tracks) {\n            this.removeTrack(track);\n\n            if (releaseTracks) {\n                track.release();\n            }\n        }\n\n        WebRTCModule.mediaStreamRelease(this._reactTag);\n    }\n}\n"]}