{"version":3,"sources":["RTCRtpCapabilities.ts"],"names":["WebRTCModule","NativeModules","RTCRtpCapabilities","constructor","codecs","_codecs","Object","freeze","getCapabilities","endpoint","capabilities","senderGetCapabilities","receiverGetCapabilities","TypeError","DEFAULT_AUDIO_CAPABILITIES","RTCRtpCodecCapability","mimeType","senderCapabilities","receiverCapabilities"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,0BAAzB;AAEA;AACA;AACA;AACA;AACA;;AACe,MAAMC,kBAAN,CAAyB;AAEpCC,EAAAA,WAAW,CAACC,MAAD,EAAkC;AAAA,qCADV,EACU;;AACzC,SAAKC,OAAL,GAAeD,MAAf;AACAE,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;;AAES,MAANH,MAAM,GAAG;AACT,WAAO,KAAKC,OAAZ;AACH;;AATmC;;;;AAaxC,SAASG,eAAT,CAAyBC,QAAzB,EAAqF;AACjF,UAAQA,QAAR;AACI,SAAK,QAAL;AAAe;AACX,cAAMC,YAAY,GAAGV,YAAY,CAACW,qBAAb,EAArB;;AAEA,YAAI,CAACD,YAAL,EAAmB;AACf,iBAAO,IAAP;AACH;;AAED,eAAO,IAAIR,kBAAJ,CAAuBQ,YAAY,CAACN,MAApC,CAAP;AACH;;AAED,SAAK,UAAL;AAAiB;AACb,cAAMM,YAAY,GAAGV,YAAY,CAACY,uBAAb,EAArB;;AAEA,YAAI,CAACF,YAAL,EAAmB;AACf,iBAAO,IAAP;AACH;;AAED,eAAO,IAAIR,kBAAJ,CAAuBQ,YAAY,CAACN,MAApC,CAAP;AACH;;AAED;AACI,YAAM,IAAIS,SAAJ,CAAc,uBAAuBJ,QAArC,CAAN;AAtBR;AAwBH;AAGD;AACA;AACA;AACA;AACA;;;AACO,MAAMK,0BAA0B,GAAG,IAAIZ,kBAAJ,CAAuB,CAC7D,IAAIa,8BAAJ,CAA0B;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAA1B,CAD6D,EAE7D,IAAID,8BAAJ,CAA0B;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAA1B,CAF6D,CAAvB,CAAnC,C,CAKP;;;AACO,MAAMC,kBAAkB,GAAGT,eAAe,CAAC,QAAD,CAA1C;;AACA,MAAMU,oBAAoB,GAAGV,eAAe,CAAC,UAAD,CAA5C","sourcesContent":["import { NativeModules } from 'react-native';\n\nimport RTCRtpCodecCapability from './RTCRtpCodecCapability';\nconst { WebRTCModule } = NativeModules;\n\n/**\n * @brief represents codec capabilities for senders and receivers. Currently\n * this only supports codec names and does not have other\n * fields like clockRate and numChannels and such.\n */\nexport default class RTCRtpCapabilities {\n    _codecs: RTCRtpCodecCapability[] = [];\n    constructor(codecs: RTCRtpCodecCapability[]) {\n        this._codecs = codecs;\n        Object.freeze(this);\n    }\n\n    get codecs() {\n        return this._codecs;\n    }\n}\n\n\nfunction getCapabilities(endpoint: 'sender' | 'receiver'): RTCRtpCapabilities | null {\n    switch (endpoint) {\n        case 'sender': {\n            const capabilities = WebRTCModule.senderGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        case 'receiver': {\n            const capabilities = WebRTCModule.receiverGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        default:\n            throw new TypeError('Invalid endpoint: ' + endpoint);\n    }\n}\n\n\n/**\n * Hardcoded audio capabilities based on the WebRTC native documentation:\n * https://webrtc.github.io/webrtc-org/faq/. The mime type is specified in\n * https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2.\n */\nexport const DEFAULT_AUDIO_CAPABILITIES = new RTCRtpCapabilities([\n    new RTCRtpCodecCapability({ mimeType: 'audio/G722' }),\n    new RTCRtpCodecCapability({ mimeType: 'audio/iLBC' }),\n]);\n\n// Initialize capabilities on module import\nexport const senderCapabilities = getCapabilities('sender');\nexport const receiverCapabilities = getCapabilities('receiver');\n\n"]}