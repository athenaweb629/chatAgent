{"version":3,"sources":["RTCPeerConnection.ts"],"names":["log","Logger","WebRTCModule","NativeModules","PEER_CONNECTION_EVENTS","nextPeerConnectionId","RTCPeerConnection","constructor","configuration","_pcId","peerConnectionInit","_transceivers","_remoteStreams","Map","_pendingTrackEvents","_registerEvents","debug","createOffer","options","sdpInfo","transceiversInfo","peerConnectionCreateOffer","RTCUtil","normalizeOfferOptions","_updateTransceivers","createAnswer","peerConnectionCreateAnswer","setConfiguration","peerConnectionSetConfiguration","setLocalDescription","sessionDescription","desc","type","sdp","isSdpTypeValid","Error","peerConnectionSetLocalDescription","localDescription","RTCSessionDescription","setRemoteDescription","Promise","reject","newTransceivers","peerConnectionSetRemoteDescription","remoteDescription","forEach","t","transceiverOrder","transceiver","newSender","RTCRtpSender","sender","track","remoteTrack","receiver","MediaStreamTrack","newReceiver","RTCRtpReceiver","newTransceiver","RTCRtpTransceiver","_insertTransceiverSorted","pendingTrackEvents","ev","getTransceivers","filter","id","_mid","mid","_currentDirection","currentDirection","_direction","direction","streams","map","streamInfo","has","streamId","stream","MediaStream","streamReactTag","tracks","set","get","_tracks","includes","push","eventData","dispatchEvent","RTCTrackEvent","MediaStreamTrackEvent","_setMutedInternal","addIceCandidate","candidate","sdpMLineIndex","undefined","sdpMid","TypeError","newSdp","peerConnectionAddICECandidate","toJSON","addTrack","connectionState","_trackExists","streamIds","s","result","peerConnectionAddTrack","existingSender","getSenders","_track","existingTransceiver","addTransceiver","source","init","src","trackId","peerConnectionAddTransceiver","removeTrack","_peerConnectionId","find","peerConnectionRemoveTrack","getStats","selector","data","peerConnectionGetStats","JSON","parse","senders","receivers","getReceivers","r","matches","length","sr","e","stopped","Boolean","close","peerConnectionClose","_setStopped","restartIce","peerConnectionRestartIce","pcId","RTCEvent","iceConnectionState","peerConnectionDispose","signalingState","receiverId","values","trackIdx","indexOf","splice","RTCIceCandidate","RTCIceCandidateEvent","iceGatheringState","channel","RTCDataChannel","dataChannel","RTCDataChannelEvent","muted","createDataChannel","label","dataChannelDict","channelInfo","transceiverUpdates","removeStopped","update","transceiverId","_stopped","isStopped","_sender","_rtpParameters","RTCRtpSendParameters","senderRtpParameters","_receiver","RTCRtpReceiveParameters","receiverRtpParameters","order","sort","a","b"],"mappings":"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","sourcesContent":["\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport MediaStream from './MediaStream';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCEvent from './RTCEvent';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCRtpReceiveParameters from './RTCRtpReceiveParameters';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSendParameters from './RTCRtpSendParameters';\nimport RTCRtpSender from './RTCRtpSender';\nimport RTCRtpTransceiver from './RTCRtpTransceiver';\nimport RTCSessionDescription, { RTCSessionDescriptionInit } from './RTCSessionDescription';\nimport RTCTrackEvent from './RTCTrackEvent';\nimport * as RTCUtil from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\ntype RTCSignalingState =\n    | 'stable'\n    | 'have-local-offer'\n    | 'have-remote-offer'\n    | 'have-local-pranswer'\n    | 'have-remote-pranswer'\n    | 'closed';\n\ntype RTCIceGatheringState = 'new' | 'gathering' | 'complete';\n\ntype RTCPeerConnectionState = 'new' | 'connecting' | 'connected' | 'disconnected' | 'failed' | 'closed';\n\ntype RTCIceConnectionState = 'new' | 'checking' | 'connected' | 'completed' | 'failed' | 'disconnected' | 'closed';\n\ntype RTCDataChannelInit = {\n    ordered?: boolean,\n    maxPacketLifeTime?: number,\n    maxRetransmits?: number,\n    protocol?: string,\n    negotiated?: boolean,\n    id?: number\n};\n\nconst PEER_CONNECTION_EVENTS = [\n    'connectionstatechange',\n    'icecandidate',\n    'icecandidateerror',\n    'iceconnectionstatechange',\n    'icegatheringstatechange',\n    'negotiationneeded',\n    'signalingstatechange',\n    'datachannel',\n    'track',\n    'error'\n];\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends defineCustomEventTarget(...PEER_CONNECTION_EVENTS) {\n    localDescription: RTCSessionDescription | null = null;\n    remoteDescription: RTCSessionDescription | null = null;\n\n    signalingState: RTCSignalingState = 'stable';\n    iceGatheringState: RTCIceGatheringState = 'new';\n    connectionState: RTCPeerConnectionState = 'new';\n    iceConnectionState: RTCIceConnectionState = 'new';\n\n    _pcId: number;\n    _transceivers: { order: number, transceiver: RTCRtpTransceiver }[];\n    _remoteStreams: Map<string, MediaStream>;\n    _pendingTrackEvents: any[];\n\n    constructor(configuration) {\n        super();\n\n        this._pcId = nextPeerConnectionId++;\n        WebRTCModule.peerConnectionInit(configuration, this._pcId);\n\n        this._transceivers = [];\n        this._remoteStreams = new Map();\n        this._pendingTrackEvents = [];\n\n        this._registerEvents();\n\n        log.debug(`${this._pcId} ctor`);\n    }\n\n    async createOffer(options) {\n        log.debug(`${this._pcId} createOffer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateOffer(this._pcId, RTCUtil.normalizeOfferOptions(options));\n\n        log.debug(`${this._pcId} createOffer OK`);\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    async createAnswer() {\n        log.debug(`${this._pcId} createAnswer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateAnswer(this._pcId, {});\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    setConfiguration(configuration): void {\n        WebRTCModule.peerConnectionSetConfiguration(configuration, this._pcId);\n    }\n\n    async setLocalDescription(sessionDescription?: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setLocalDescription`);\n\n        let desc;\n\n        if (sessionDescription) {\n            desc = {\n                type: sessionDescription.type,\n                sdp: sessionDescription.sdp ?? ''\n            };\n\n            if (!RTCUtil.isSdpTypeValid(desc.type)) {\n                throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n            }\n        } else {\n            desc = null;\n        }\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetLocalDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.localDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.localDescription = null;\n        }\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc?.type === 'answer');\n\n        log.debug(`${this._pcId} setLocalDescription OK`);\n    }\n\n    async setRemoteDescription(sessionDescription: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setRemoteDescription`);\n\n        if (!sessionDescription) {\n            return Promise.reject(new Error('No session description provided'));\n        }\n\n        const desc = {\n            type: sessionDescription.type,\n            sdp: sessionDescription.sdp ?? ''\n        };\n\n        if (!RTCUtil.isSdpTypeValid(desc.type ?? '')) {\n            throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n        }\n\n        const {\n            sdpInfo,\n            newTransceivers,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetRemoteDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.remoteDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.remoteDescription = null;\n        }\n\n        newTransceivers?.forEach(t => {\n            const { transceiverOrder, transceiver } = t;\n            const newSender = new RTCRtpSender({ ...transceiver.sender, track: null });\n            const remoteTrack\n                = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n            const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n            const newTransceiver = new RTCRtpTransceiver({\n                ...transceiver,\n                sender: newSender,\n                receiver: newReceiver,\n            });\n\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n        });\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc.type === 'answer');\n\n        // Fire track events. They must fire before sRD resolves.\n        const pendingTrackEvents = this._pendingTrackEvents;\n\n        this._pendingTrackEvents = [];\n\n        for (const ev of pendingTrackEvents) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.receiver.id ===  ev.receiver.id);\n\n            // We need to fire this event for an existing track sometimes, like\n            // when the transceiver direction (on the sending side) switches from\n            // sendrecv to recvonly and then back.\n\n            // @ts-ignore\n            const track: MediaStreamTrack = transceiver.receiver.track;\n\n            transceiver._mid = ev.transceiver.mid;\n            transceiver._currentDirection = ev.transceiver.currentDirection;\n            transceiver._direction = ev.transceiver.direction;\n\n            // Get the stream object from the event. Create if necessary.\n            const streams: MediaStream[] = ev.streams.map(streamInfo => {\n                // Here we are making sure that we don't create stream objects that already exist\n                // So that event listeners do get the same object if it has been created before.\n                if (!this._remoteStreams.has(streamInfo.streamId)) {\n                    const stream = new MediaStream({\n                        streamId: streamInfo.streamId,\n                        streamReactTag: streamInfo.streamReactTag,\n                        tracks: []\n                    });\n\n                    this._remoteStreams.set(streamInfo.streamId, stream);\n                }\n\n                const stream = this._remoteStreams.get(streamInfo.streamId);\n\n                if (!stream?._tracks.includes(track)) {\n                    stream?._tracks.push(track);\n                }\n\n                return stream;\n            });\n\n            const eventData = {\n                streams,\n                transceiver,\n                track,\n                receiver: transceiver.receiver\n            };\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCTrackEvent('track', eventData));\n\n            streams.forEach(stream => {\n                // @ts-ignore\n                stream.dispatchEvent(new MediaStreamTrackEvent('addtrack', { track }));\n            });\n\n            // Dispatch an unmute event for the track.\n            track._setMutedInternal(false);\n        }\n\n        log.debug(`${this._pcId} setRemoteDescription OK`);\n    }\n\n    async addIceCandidate(candidate): Promise<void> {\n        log.debug(`${this._pcId} addIceCandidate`);\n\n        if (!candidate || !candidate.candidate) {\n            // XXX end-of candidates is not implemented: https://bugs.chromium.org/p/webrtc/issues/detail?id=9218\n            return;\n        }\n\n        if (\n            candidate.sdpMLineIndex === null ||\n            candidate.sdpMLineIndex === undefined ||\n            candidate.sdpMid === null ||\n            candidate.sdpMid === undefined\n        ) {\n            throw new TypeError('`sdpMLineIndex` and `sdpMid` must not null or undefined');\n        }\n\n        const newSdp = await WebRTCModule.peerConnectionAddICECandidate(\n            this._pcId,\n            candidate.toJSON ? candidate.toJSON() : candidate\n        );\n\n        this.remoteDescription = new RTCSessionDescription(newSdp);\n    }\n\n    /**\n     * @brief Adds a new track to the {@link RTCPeerConnection},\n     * and indicates that it is contained in the specified {@link MediaStream}s.\n     * This method has to be synchronous as the W3C API expects a track to be returned\n     * @param {MediaStreamTrack} track The track to be added\n     * @param {...MediaStream} streams One or more {@link MediaStream}s the track needs to be added to\n     * https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack\n     */\n    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender {\n        log.debug(`${this._pcId} addTrack`);\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        if (this._trackExists(track)) {\n            throw new Error('Track already exists in a sender');\n        }\n\n        const streamIds = streams.map(s => s.id);\n        const result = WebRTCModule.peerConnectionAddTrack(this._pcId, track.id, { streamIds });\n\n        if (result === null) {\n            throw new Error('Could not add sender');\n        }\n\n        const { transceiverOrder, transceiver, sender } = result;\n\n        // According to the W3C docs, the sender could have been reused, and\n        // so we check if that is the case, and update accordingly.\n        const [ existingSender ] = this\n            .getSenders()\n            .filter(s => s.id === sender.id);\n\n        if (existingSender) {\n            // Update sender\n            existingSender._track = track;\n\n            // Update the corresponding transceiver as well\n            const [ existingTransceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === existingSender.id);\n\n            existingTransceiver._direction = transceiver.direction;\n            existingTransceiver._currentDirection = transceiver.currentDirection;\n\n            return existingSender;\n        }\n\n        // This is a new transceiver, should create a transceiver for it and add it\n        const newSender = new RTCRtpSender({ ...transceiver.sender, track });\n        const remoteTrack = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n        const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n        const newTransceiver = new RTCRtpTransceiver({\n            ...transceiver,\n            sender: newSender,\n            receiver: newReceiver,\n        });\n\n        this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n\n        return newSender;\n    }\n\n    addTransceiver(source: 'audio' | 'video' | MediaStreamTrack, init): RTCRtpTransceiver {\n        log.debug(`${this._pcId} addTransceiver`);\n\n        let src = {};\n\n        if (source === 'audio') {\n            src = { type: 'audio' };\n        } else if (source === 'video') {\n            src = { type: 'video' };\n        } else {\n            src = { trackId: source.id };\n        }\n\n        // Extract the stream ids\n        if (init && init.streams) {\n            init.streamIds = init.streams.map(stream => stream.id);\n        }\n\n        const result = WebRTCModule.peerConnectionAddTransceiver(this._pcId, { ...src, init: { ...init } });\n\n        if (result === null) {\n            throw new Error('Transceiver could not be added');\n        }\n\n        const t = result.transceiver;\n        let track: MediaStreamTrack | null = null;\n\n        if (typeof source === 'string') {\n            if (t.sender.track) {\n                track = new MediaStreamTrack(t.sender.track);\n            }\n        } else {\n            // 'source' is a MediaStreamTrack\n            track = source;\n        }\n\n        const sender = new RTCRtpSender({ ...t.sender, track });\n        const remoteTrack = t.receiver.track ? new MediaStreamTrack(t.receiver.track) : null;\n        const receiver = new RTCRtpReceiver({ ...t.receiver, track: remoteTrack });\n        const transceiver = new RTCRtpTransceiver({\n            ...result.transceiver,\n            sender,\n            receiver\n        });\n\n        this._insertTransceiverSorted(result.transceiverOrder, transceiver);\n\n        return transceiver;\n    }\n\n    removeTrack(sender: RTCRtpSender) {\n        log.debug(`${this._pcId} removeTrack`);\n\n        if (this._pcId !== sender._peerConnectionId) {\n            throw new Error('Sender does not belong to this peer connection');\n        }\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        const existingSender = this\n            .getSenders()\n            .find(s => s === sender);\n\n        if (!existingSender) {\n            throw new Error('Sender does not exist');\n        }\n\n        if (existingSender.track === null) {\n            return;\n        }\n\n        // Blocking!\n        WebRTCModule.peerConnectionRemoveTrack(this._pcId, sender.id);\n\n        existingSender._track = null;\n\n        const [ existingTransceiver ] = this\n            .getTransceivers()\n            .filter(t => t.sender.id === existingSender.id);\n\n        existingTransceiver._direction = existingTransceiver.direction === 'sendrecv' ? 'recvonly' : 'inactive';\n    }\n\n    async getStats(selector?: MediaStreamTrack) {\n        log.debug(`${this._pcId} getStats`);\n\n        if (!selector) {\n            const data = await WebRTCModule.peerConnectionGetStats(this._pcId);\n\n            /**\n             * On both Android and iOS it is faster to construct a single\n             * JSON string representing the Map of StatsReports and have it\n             * pass through the React Native bridge rather than the Map of\n             * StatsReports. While the implementations do try to be faster in\n             * general, the stress is on being faster to pass through the React\n             * Native bridge which is a bottleneck that tends to be visible in\n             * the UI when there is congestion involving UI-related passing.\n             */\n            return new Map(JSON.parse(data));\n        } else {\n            const senders = this.getSenders().filter(s => s.track === selector);\n            const receivers = this.getReceivers().filter(r => r.track === selector);\n            const matches = senders.length + receivers.length;\n\n            if (matches === 0) {\n                throw new Error('Invalid selector: could not find matching sender / receiver');\n            } else if (matches > 1) {\n                throw new Error('Invalid selector: multiple matching senders / receivers');\n            } else {\n                const sr = senders[0] || receivers[0];\n\n                return sr.getStats();\n            }\n        }\n    }\n\n    getTransceivers(): RTCRtpTransceiver[] {\n        return this._transceivers.map(e => e.transceiver);\n    }\n\n    getSenders(): RTCRtpSender[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.sender).filter(Boolean);\n    }\n\n    getReceivers(): RTCRtpReceiver[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.receiver).filter(Boolean);\n    }\n\n    close(): void {\n        log.debug(`${this._pcId} close`);\n\n        if (this.connectionState === 'closed') {\n            return;\n        }\n\n        WebRTCModule.peerConnectionClose(this._pcId);\n\n        // Mark transceivers as stopped.\n        this._transceivers.forEach(({ transceiver })=> {\n            transceiver._setStopped();\n        });\n    }\n\n    restartIce(): void {\n        WebRTCModule.peerConnectionRestartIce(this._pcId);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'peerConnectionOnRenegotiationNeeded', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('negotiationneeded'));\n        });\n\n        addListener(this, 'peerConnectionIceConnectionChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceConnectionState = ev.iceConnectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('iceconnectionstatechange'));\n        });\n\n        addListener(this, 'peerConnectionStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.connectionState = ev.connectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('connectionstatechange'));\n\n            if (ev.connectionState === 'closed') {\n                // This PeerConnection is done, clean up.\n                removeListener(this);\n\n                WebRTCModule.peerConnectionDispose(this._pcId);\n            }\n        });\n\n        addListener(this, 'peerConnectionSignalingStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.signalingState = ev.signalingState;\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('signalingstatechange'));\n        });\n\n        // Consider moving away from this event: https://github.com/WebKit/WebKit/pull/3953\n        addListener(this, 'peerConnectionOnTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} ontrack`);\n\n            // NOTE: We need to make sure the track event fires right before sRD completes,\n            // so we queue them up here and dispatch the events when sRD fires, but before completing it.\n            // In the future we should probably implement out own logic and drop this event altogether.\n            this._pendingTrackEvents.push(ev);\n        });\n\n        addListener(this, 'peerConnectionOnRemoveTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} onremovetrack ${ev.receiverId}`);\n\n            const receiver = this.getReceivers().find(r => r.id === ev.receiverId);\n            const track = receiver?.track;\n\n            if (receiver && track) {\n                // As per the spec:\n                // - Remove the track from any media streams that were previously passed to the `track` event.\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-removetrack,\n                // - Mark the track as muted:\n                // https://w3c.github.io/webrtc-pc/#process-remote-track-removal\n                for (const stream of this._remoteStreams.values()) {\n                    if (stream._tracks.includes(track)) {\n                        const trackIdx = stream._tracks.indexOf(track);\n\n                        log.debug(`${this._pcId} removetrack ${track.id}`);\n\n                        stream._tracks.splice(trackIdx, 1);\n\n                        // @ts-ignore\n                        stream.dispatchEvent(new MediaStreamTrackEvent('removetrack', { track }));\n\n                        // Dispatch a mute event for the track.\n                        track._setMutedInternal(true);\n                    }\n                }\n            }\n        });\n\n        addListener(this, 'peerConnectionGotICECandidate', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const sdpInfo = ev.sdp;\n\n            // Can happen when doing a rollback.\n            if (sdpInfo.type && sdpInfo.sdp) {\n                this.localDescription = new RTCSessionDescription(sdpInfo);\n            } else {\n                this.localDescription = null;\n            }\n\n            const candidate = new RTCIceCandidate(ev.candidate);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate }));\n        });\n\n        addListener(this, 'peerConnectionIceGatheringChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceGatheringState = ev.iceGatheringState;\n\n            if (this.iceGatheringState === 'complete') {\n                const sdpInfo = ev.sdp;\n\n                // Can happen when doing a rollback.\n                if (sdpInfo.type && sdpInfo.sdp) {\n                    this.localDescription = new RTCSessionDescription(sdpInfo);\n                } else {\n                    this.localDescription = null;\n                }\n\n                // @ts-ignore\n                this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate: null }));\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('icegatheringstatechange'));\n        });\n\n        addListener(this, 'peerConnectionDidOpenDataChannel', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const channel = new RTCDataChannel(ev.dataChannel);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCDataChannelEvent('datachannel', { channel }));\n        });\n\n        addListener(this, 'mediaStreamTrackMuteChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const [\n                track\n            ] = this.getReceivers().map(r => r.track).filter(t => t?.id === ev.trackId);\n\n            if (track) {\n                track._setMutedInternal(ev.muted);\n            }\n        });\n    }\n\n    /**\n     * Creates a new RTCDataChannel object with the given label. The\n     * RTCDataChannelInit dictionary can be used to configure properties of the\n     * underlying channel such as data reliability.\n     *\n     * @param {string} label - the value with which the label attribute of the new\n     * instance is to be initialized\n     * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n     * values with which to initialize corresponding attributes of the new\n     * instance such as id\n     */\n    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel {\n        if (dataChannelDict && 'id' in dataChannelDict) {\n            const id = dataChannelDict.id;\n\n            if (typeof id !== 'number') {\n                throw new TypeError('DataChannel id must be a number: ' + id);\n            }\n        }\n\n        const channelInfo = WebRTCModule.createDataChannel(this._pcId, label, dataChannelDict);\n\n        if (channelInfo === null) {\n            throw new TypeError('Failed to create new DataChannel');\n        }\n\n        return new RTCDataChannel(channelInfo);\n    }\n\n    /**\n     * Check whether a media stream track exists already in a sender.\n     * See https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack for more information\n     */\n    _trackExists(track: MediaStreamTrack): boolean {\n        const [ sender ] = this\n            .getSenders()\n            .filter(\n                sender => sender.track?.id === track.id\n            );\n\n        return sender? true : false;\n    }\n\n    /**\n     * Updates transceivers after offer/answer updates if necessary.\n     */\n    _updateTransceivers(transceiverUpdates, removeStopped = false) {\n        for (const update of transceiverUpdates) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === update.transceiverId);\n\n            if (!transceiver) {\n                continue;\n            }\n\n            transceiver._currentDirection = update.currentDirection;\n            transceiver._mid = update.mid;\n            transceiver._stopped = Boolean(update.isStopped);\n            transceiver._sender._rtpParameters = new RTCRtpSendParameters(update.senderRtpParameters);\n            transceiver._receiver._rtpParameters = new RTCRtpReceiveParameters(update.receiverRtpParameters);\n        }\n\n        if (removeStopped) {\n            const stopped = this.getTransceivers().filter(t => t.stopped);\n            const newTransceivers = this._transceivers.filter(t => !stopped.includes(t.transceiver));\n\n            this._transceivers = newTransceivers;\n        }\n    }\n\n    /**\n     * Inserts transceiver into the transceiver array in the order they are created (timestamp).\n     * @param order an index that refers to when it it was created relatively.\n     * @param transceiver the transceiver object to be inserted.\n     */\n    _insertTransceiverSorted(order: number, transceiver: RTCRtpTransceiver) {\n        this._transceivers.push({ order, transceiver });\n        this._transceivers.sort((a, b) => a.order - b.order);\n    }\n}\n"]}