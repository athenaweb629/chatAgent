{"version":3,"sources":["EventEmitter.ts"],"names":["WebRTCModule","NativeModules","nativeEmitter","NativeEventEmitter","NATIVE_EVENTS","eventEmitter","EventEmitter","setupNativeEvents","eventName","addListener","args","emit","_subscriptions","Map","listener","eventHandler","includes","Error","has","set","get","push","removeListener","forEach","sub","remove","delete"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;AADA;AAGA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,0BAAzB,C,CAEA;AACA;;AACA,MAAMC,aAAa,GAAG,IAAIC,+BAAJ,CAAuBH,YAAvB,CAAtB;AAEA,MAAMI,aAAa,GAAG,CAClB,qCADkB,EAElB,4BAFkB,EAGlB,qCAHkB,EAIlB,oCAJkB,EAKlB,mCALkB,EAMlB,+BANkB,EAOlB,kCAPkB,EAQlB,6BARkB,EASlB,uBATkB,EAUlB,yBAVkB,EAWlB,2BAXkB,EAYlB,oCAZkB,EAalB,6BAbkB,EAclB,uBAdkB,CAAtB;AAiBA,MAAMC,YAAY,GAAG,IAAIC,qBAAJ,EAArB;;AAEO,SAASC,iBAAT,GAA6B;AAChC,OAAK,MAAMC,SAAX,IAAwBJ,aAAxB,EAAuC;AACnCF,IAAAA,aAAa,CAACO,WAAd,CAA0BD,SAA1B,EAAqC,YAAa;AAAA,wCAATE,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAC9CL,MAAAA,YAAY,CAACM,IAAb,CAAkBH,SAAlB,EAA6B,GAAGE,IAAhC;AACH,KAFD;AAGH;AACJ;;AAKD,MAAME,cAAoD,GAAG,IAAIC,GAAJ,EAA7D;;AAEO,SAASJ,WAAT,CAAqBK,QAArB,EAAyCN,SAAzC,EAA4DO,YAA5D,EAA8F;AAAA;;AACjG,MAAI,CAACX,aAAa,CAACY,QAAd,CAAuBR,SAAvB,CAAL,EAAwC;AACpC,UAAM,IAAIS,KAAJ,CAAW,kBAAiBT,SAAU,EAAtC,CAAN;AACH;;AAED,MAAI,CAACI,cAAc,CAACM,GAAf,CAAmBJ,QAAnB,CAAL,EAAmC;AAC/BF,IAAAA,cAAc,CAACO,GAAf,CAAmBL,QAAnB,EAA6B,EAA7B;AACH;;AAED,wBAAAF,cAAc,CAACQ,GAAf,CAAmBN,QAAnB,2EAA8BO,IAA9B,CAAmChB,YAAY,CAACI,WAAb,CAAyBD,SAAzB,EAAoCO,YAApC,CAAnC;AACH;;AAEM,SAASO,cAAT,CAAwBR,QAAxB,EAAkD;AAAA;;AACrD,yBAAAF,cAAc,CAACQ,GAAf,CAAmBN,QAAnB,6EAA8BS,OAA9B,CAAsCC,GAAG,IAAI;AACzCA,IAAAA,GAAG,CAACC,MAAJ;AACH,GAFD;;AAIAb,EAAAA,cAAc,CAACc,MAAf,CAAsBZ,QAAtB;AACH","sourcesContent":["import { NativeModules, NativeEventEmitter, EmitterSubscription } from 'react-native';\n// @ts-ignore\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\n\nconst { WebRTCModule } = NativeModules;\n\n// This emitter is going to be used to listen to all the native events (once) and then\n// re-emit them on a JS-only emitter.\nconst nativeEmitter = new NativeEventEmitter(WebRTCModule);\n\nconst NATIVE_EVENTS = [\n    'peerConnectionSignalingStateChanged',\n    'peerConnectionStateChanged',\n    'peerConnectionOnRenegotiationNeeded',\n    'peerConnectionIceConnectionChanged',\n    'peerConnectionIceGatheringChanged',\n    'peerConnectionGotICECandidate',\n    'peerConnectionDidOpenDataChannel',\n    'peerConnectionOnRemoveTrack',\n    'peerConnectionOnTrack',\n    'dataChannelStateChanged',\n    'dataChannelReceiveMessage',\n    'dataChannelDidChangeBufferedAmount',\n    'mediaStreamTrackMuteChanged',\n    'mediaStreamTrackEnded',\n];\n\nconst eventEmitter = new EventEmitter();\n\nexport function setupNativeEvents() {\n    for (const eventName of NATIVE_EVENTS) {\n        nativeEmitter.addListener(eventName, (...args) => {\n            eventEmitter.emit(eventName, ...args);\n        });\n    }\n}\n\ntype EventHandler = (event: unknown) => void;\ntype Listener = unknown;\n\nconst _subscriptions: Map<Listener, EmitterSubscription[]> = new Map();\n\nexport function addListener(listener: Listener, eventName: string, eventHandler: EventHandler): void {\n    if (!NATIVE_EVENTS.includes(eventName)) {\n        throw new Error(`Invalid event: ${eventName}`);\n    }\n\n    if (!_subscriptions.has(listener)) {\n        _subscriptions.set(listener, []);\n    }\n\n    _subscriptions.get(listener)?.push(eventEmitter.addListener(eventName, eventHandler));\n}\n\nexport function removeListener(listener: Listener): void {\n    _subscriptions.get(listener)?.forEach(sub => {\n        sub.remove();\n    });\n\n    _subscriptions.delete(listener);\n}\n"]}