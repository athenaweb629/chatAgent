{"version":3,"sources":["RTCDataChannel.ts"],"names":["WebRTCModule","NativeModules","DATA_CHANNEL_EVENTS","RTCDataChannel","constructor","info","_peerConnectionId","peerConnectionId","_reactTag","reactTag","_bufferedAmount","_label","label","_id","id","_ordered","Boolean","ordered","_maxPacketLifeTime","maxPacketLifeTime","_maxRetransmits","maxRetransmits","_protocol","protocol","_negotiated","negotiated","_readyState","readyState","_registerEvents","bufferedAmount","send","data","dataChannelSend","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","TypeError","base64data","base64","fromByteArray","close","dataChannelClose","ev","state","dispatchEvent","RTCDataChannelEvent","channel","dataChannelDispose","type","toByteArray","MessageEvent","bufferedAmountLowThreshold"],"mappings":"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","sourcesContent":["\nimport * as base64 from 'base64-js';\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport MessageEvent from './MessageEvent';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\n\nconst { WebRTCModule } = NativeModules;\n\ntype RTCDataChannelState = 'connecting' | 'open' | 'closing' | 'closed';\n\nconst DATA_CHANNEL_EVENTS = [ 'open', 'message', 'bufferedamountlow', 'closing', 'close', 'error' ];\n\nexport default class RTCDataChannel extends defineCustomEventTarget(...DATA_CHANNEL_EVENTS) {\n    _peerConnectionId: number;\n    _reactTag: string;\n\n    _bufferedAmount: number;\n    _id: number;\n    _label: string;\n    _maxPacketLifeTime?: number;\n    _maxRetransmits?: number;\n    _negotiated: boolean;\n    _ordered: boolean;\n    _protocol: string;\n    _readyState: RTCDataChannelState;\n\n    binaryType = 'arraybuffer'; // we only support 'arraybuffer'\n    bufferedAmountLowThreshold = 0;\n\n    constructor(info) {\n        super();\n\n        this._peerConnectionId = info.peerConnectionId;\n        this._reactTag = info.reactTag;\n\n        this._bufferedAmount = 0;\n        this._label = info.label;\n        this._id = info.id === -1 ? null : info.id; // null until negotiated.\n        this._ordered = Boolean(info.ordered);\n        this._maxPacketLifeTime = info.maxPacketLifeTime;\n        this._maxRetransmits = info.maxRetransmits;\n        this._protocol = info.protocol || '';\n        this._negotiated = Boolean(info.negotiated);\n        this._readyState = info.readyState;\n\n        this._registerEvents();\n    }\n\n    get bufferedAmount(): number {\n        return this._bufferedAmount;\n    }\n\n    get label(): string {\n        return this._label;\n    }\n\n    get id(): number {\n        return this._id;\n    }\n\n    get ordered(): boolean {\n        return this._ordered;\n    }\n\n    get maxPacketLifeTime(): number | undefined {\n        return this._maxPacketLifeTime;\n    }\n\n    get maxRetransmits(): number | undefined {\n        return this._maxRetransmits;\n    }\n\n    get protocol(): string {\n        return this._protocol;\n    }\n\n    get negotiated(): boolean {\n        return this._negotiated;\n    }\n\n    get readyState(): string {\n        return this._readyState;\n    }\n\n    send(data: string): void;\n    send(data: ArrayBuffer): void;\n    send(data: ArrayBufferView): void;\n    send(data: string | ArrayBuffer | ArrayBufferView): void {\n        if (typeof data === 'string') {\n            WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, data, 'text');\n\n            return;\n        }\n\n        // Safely convert the buffer object to an Uint8Array for base64-encoding\n        if (ArrayBuffer.isView(data)) {\n            data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        } else if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n        } else {\n            throw new TypeError('Data must be either string, ArrayBuffer, or ArrayBufferView');\n        }\n\n        const base64data = base64.fromByteArray(data as Uint8Array);\n\n        WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, base64data, 'binary');\n    }\n\n    close(): void {\n        if (this._readyState === 'closing' || this._readyState === 'closed') {\n            return;\n        }\n\n        WebRTCModule.dataChannelClose(this._peerConnectionId, this._reactTag);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'dataChannelStateChanged', (ev: any) => {\n            if (ev.reactTag !== this._reactTag) {\n                return;\n            }\n\n            this._readyState = ev.state;\n\n            if (this._id === null && ev.id !== -1) {\n                this._id = ev.id;\n            }\n\n            if (this._readyState === 'open') {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('open', { channel: this }));\n            } else if (this._readyState === 'closing') {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('closing', { channel: this }));\n            } else if (this._readyState === 'closed') {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('close', { channel: this }));\n\n                // This DataChannel is done, clean up event handlers.\n                removeListener(this);\n\n                WebRTCModule.dataChannelDispose(this._peerConnectionId, this._reactTag);\n            }\n        });\n\n        addListener(this, 'dataChannelReceiveMessage', (ev: any) => {\n            if (ev.reactTag !== this._reactTag) {\n                return;\n            }\n\n            let data = ev.data;\n\n            if (ev.type === 'binary') {\n                data = base64.toByteArray(ev.data).buffer;\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new MessageEvent('message', { data }));\n        });\n\n        addListener(this, 'dataChannelDidChangeBufferedAmount', (ev: any) => {\n            if (ev.reactTag !== this._reactTag) {\n                return;\n            }\n\n            this._bufferedAmount = ev.bufferedAmount;\n\n            if (this._bufferedAmount < this.bufferedAmountLowThreshold) {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('bufferedamountlow', { channel: this }));\n            }\n        });\n    }\n}\n"]}