{"version":3,"sources":["RTCRtpParameters.ts"],"names":["RTCRtpParameters","constructor","init","codec","codecs","push","RTCRtpCodecParameters","ext","headerExtensions","RTCRtpHeaderExtension","rtcp","RTCRtcpParameters","toJSON","map","c","he"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AASe,MAAMA,gBAAN,CAAuB;AAKlCC,EAAAA,WAAW,CAACC,IAAD,EAA6B;AAAA,oCAJG,EAIH;;AAAA,8CAHa,EAGb;;AAAA;;AACpC,SAAK,MAAMC,KAAX,IAAoBD,IAAI,CAACE,MAAzB,EAAiC;AAC7B,WAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAIC,8BAAJ,CAA0BH,KAA1B,CAAjB;AACH;;AAED,SAAK,MAAMI,GAAX,IAAkBL,IAAI,CAACM,gBAAvB,EAAyC;AACrC,WAAKA,gBAAL,CAAsBH,IAAtB,CAA2B,IAAII,8BAAJ,CAA0BF,GAA1B,CAA3B;AACH;;AAED,SAAKG,IAAL,GAAY,IAAIC,0BAAJ,CAAsBT,IAAI,CAACQ,IAA3B,CAAZ;AACH;;AAEDE,EAAAA,MAAM,GAAyB;AAC3B,WAAO;AACHR,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYS,GAAZ,CAAgBC,CAAC,IAAIA,CAAC,CAACF,MAAF,EAArB,CADL;AAEHJ,MAAAA,gBAAgB,EAAE,KAAKA,gBAAL,CAAsBK,GAAtB,CAA0BE,EAAE,IAAIA,EAAE,CAACH,MAAH,EAAhC,CAFf;AAGHF,MAAAA,IAAI,EAAE,KAAKA,IAAL,CAAUE,MAAV;AAHH,KAAP;AAKH;;AAvBiC","sourcesContent":["import RTCRtcpParameters, { RTCRtcpParametersInit } from './RTCRtcpParameters';\nimport RTCRtpCodecParameters, { RTCRtpCodecParametersInit } from './RTCRtpCodecParameters';\nimport RTCRtpHeaderExtension, { RTCRtpHeaderExtensionInit } from './RTCRtpHeaderExtension';\n\n\nexport interface RTCRtpParametersInit {\n    codecs: RTCRtpCodecParametersInit[],\n    headerExtensions: RTCRtpHeaderExtensionInit[],\n    rtcp: RTCRtcpParametersInit\n}\n\nexport default class RTCRtpParameters {\n    readonly codecs: RTCRtpCodecParameters[] = [];\n    readonly headerExtensions: RTCRtpHeaderExtension[] = [];\n    readonly rtcp: RTCRtcpParameters;\n\n    constructor(init: RTCRtpParametersInit) {\n        for (const codec of init.codecs) {\n            this.codecs.push(new RTCRtpCodecParameters(codec));\n        }\n\n        for (const ext of init.headerExtensions) {\n            this.headerExtensions.push(new RTCRtpHeaderExtension(ext));\n        }\n\n        this.rtcp = new RTCRtcpParameters(init.rtcp);\n    }\n\n    toJSON(): RTCRtpParametersInit {\n        return {\n            codecs: this.codecs.map(c => c.toJSON()),\n            headerExtensions: this.headerExtensions.map(he => he.toJSON()),\n            rtcp: this.rtcp.toJSON()\n        };\n    }\n}\n"]}